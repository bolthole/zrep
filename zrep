#!/bin/ksh -p

# For more detailed documentation, see zrep.txt or zrep.overview.txt
ZREP_VERSION=1.7

######## start of included files from zrep_top here
########### zrep_vars

# This should basically be included as common vars before all zrep stuff.
# It contains all 'constant' definitions, as well as a few crucial
# shared routines, such as lock handling ones.

########################################################################
# User tunable section. These may be overridden in user environment vars
SSH=${SSH:-ssh}
ZREP_PATH=${ZREP_PATH:-zrep}  #Set to /full/path/to/zrep, if needed, for remote

# Set this if you want to use a different zfs property to store zrep info.
# default has things like zrep:dest-host and zrep:dest-fs
# Change this to non-default, if you want to have multiple destinations.
# You then need to run a separate zrep for each dest. 
# In this case, I suggest all runs use non-default value.
#  eg:  ZREPTAG=zrep-1, ZREPTAG=zrep-2. 
#  or,  ZREPTAG=zrep-uk, ZREPTAG=zrep-us
#  ** make sure value can be used in a snapshot name as well, because it
#  ** will be !
#  !! also, make sure variable is EXPORTED !!
ZREPTAG=${ZREPTAG:-zrep}

#ZREP_CREATE_FLAGS="-o whatever"   #Use for extra options on remote zfs create

# If you'd like a little extra debug output define this env var to something
#DEBUG=1

# The fastest alternative transport, IF you have multicore/thread CPUs,
# would seem to be bbcp. If you have both, then you probably want to 
# define something like this in your environment:
#BBCP="bbcp -s 8"


# You can apply filters to tweak throughput in various ways
# Sometimes it helps receive performance to use mbuffer
# Other times, you may have highly compressible data, and custom
# compression routines such as lzop or lz4 may show significant
# gains over ssh builtin compression
#
# lz4 example:
# ZREP_OUTFILTER="lz4 -c"
# ZREP_INFILTER="lz4 -d"
#
# mbuffer example:
# ZREP_OUTFILTER="mbuffer -q -m 1G -s 128k"
# ZREP_INFILTER="mbuffer -q -m 1G -s 128k"



# If you want to recursively create/send snapshots, set this to -R
#  (or use the -R option to BOTH zrep init and zrep sync
#ZREP_R=-R

# The default incremental flag is -I. 
#   UNLESS you set ZREPTAG to something other than zrep, in which case
#   you will have multiple zrep snapshot names probably going to different
#   places, and expiration wont work properly on the remote sides
#   So we will autochange incremental type to -i. .. unless you explicitly 
#   set an override value for INC_FLAG in either case.
#ZREP_INC_FLAG=-I


# If you want to override uname -n, with an official
# canonical name for zrep:src-host, use this environment variable when you 
# run "zrep init"
#ZREP_SRC_HOST=somehost.your.dom

# Solaris hack, to use native perl, which isnt always in $PATH,but should
# always be there. It's also simple, straightforward, and non-extended.
# On other OSs this path will not exist, so it will just fall back to
# use the system default perl. Unless user wants to specify perl path.
# If you dont have /usr/perl5, this wont hurt you so just ignore it.
PERL_BIN=${PERL_BIN:-/usr/perl5/bin}



#########################################################################
#########################################################################
# Everyting else below here, should not be touched. 

# First we have some "special" internal vars.
# Then autodetect routines,
# and then internal utilities such as locking functions.


# zfs get syntax is so long and ugly, this is just an internal convenience
# Get a zfs property on fs or snap. Get JUST the value, and only
# a "locally set" value rather than an inherited one 
ZFSGETLVAL="zfs get -H -o value -s local"
# But.. sometimes you want to allow propagated values. like
# the ones sent via the zrep_init setup
ZFSGETVAL="zfs get -H -o value"
#  **warning** !!
# $ZFSGETLVAL returns "" on value not set. However,
# $ZFSGETVAL  returns "-" on value not set. Grrr @zfs writers.


# Work around a bug in gentoo ksh that breaks "ls -l" builtin.
# Would prefer to just override with _AST_FEATURES, but apparently,
# that only gets checked when ksh first starts or something
# Maybe use getconf itself somehow, if safe?
if getconf PATH_RESOLVE 2> /dev/null ; then
	LS=/bin/ls
else
	LS=ls
fi

if [[ "$ZREP_SRC_HOST" != "" ]] ; then
	Z_LOCAL_HOST=${ZREP_SRC_HOST}
else
	Z_LOCAL_HOST=`uname -n`
	Z_LOCAL_HOST=${Z_LOCAL_HOST%%.*}
fi

if [[ "$ZREP_R" == "-R" ]] ; then
	Z_SNAP_R="-r"
fi

if [[ "$MBUFFER" != "" ]] ; then
	_errprint WARNING: MBUFER variable deprecated in zrep
	_errprint WARNING: use ZREP_OUTFILTER and ZREP_INFILTER instead
	ZREP_OUTFILTER="$ZREP_OUTFILTER $MBUFFER"
	ZREP_INFILTER="$MBUFFER $ZREP_INFILTER"
fi

# Sneaky vars to avoid having to use if clauses in the core code
# HOWEVER! Note that ksh doesnt seem to evaluate pipe symbols when normaly
# expanded in a command line. So, have to use 'eval' to get them to register
if [[ "$ZREP_OUTFILTER" != "" ]] ; then
	Z_F_OUT="| $ZREP_OUTFILTER"
fi
if [[ "$ZREP_INFILTER" != "" ]] ; then
	Z_F_IN="$ZREP_INFILTER |"
fi


# used to have polymorphic assign of ZREP_INC_FLAG here, but had
# to move it to AFTER checking if -t option used

# full name for this should probably be something like,
# PROPTYPES_THAT_ZREP_STATUS_CAN_USE. But that's too long :)
# Not easy to check if property types allow type "received".
# Ancient systems do not allow it
# So, just tie this to MU6 related check,like HAS_SNAPPROPS, lower down
PROPTYPES="local,received" 



# dump the usage message, and check for capabilities
# make sure we dont spew for non-root, so that "zrep status" works
case `id` in
	*'(root)'*)
	ZREP_RUNDIR=${ZREP_RUNDIR:-/var/run}
	;;
	*)
	ZREP_RUNDIR=${ZREP_RUNDIR:-/tmp}
	;;
esac
zrep_checkfile=$ZREP_RUNDIR/zrep.check.$$


zfs >$zrep_checkfile 2>&1 
# Previously did a bit of a hack job for feature detection.
# Now attempting to make it smarter,
# at the expense of some startup speed :(
Z_HAS_X=0	  # can use recv -x
Z_HAS_REC_U=0	  # can use recv -u
Z_HAS_REC_O=0     # can use recv -o (note: SmartOS -o is WRONG)
Z_HAS_SNAPPROPS=0

if grep 'help' $zrep_checkfile >/dev/null ;then
   # Presume Solaris 11, which has all features, but
   # does not allow line-by-line feature detection easily
	Z_HAS_X=1	  # can use recv -x
	Z_HAS_REC_U=1	  # can use recv -u
	Z_HAS_REC_O=1      # can use recv -o
	Z_HAS_SNAPPROPS=1 # can set properties on snapshots
			  # This also lets me set "last synced" timestamps
			  # otherwise cant use zrep:sent sanely.
			  # Would lose information on rollbacks

	DEPTHCAP="-d 1" # limits "list -r"

else
	if grep 'receive .*-[a-zA-Z]*x' $zrep_checkfile >/dev/null ;then
		Z_HAS_X=1	  # can use recv -x
	fi
	if grep 'receive .*-[a-zA-Z]*u' $zrep_checkfile >/dev/null ;then
		Z_HAS_REC_U=1	  # can use recv -u
	fi
	# Note: SmartOS implemented -o WRONG! So no Z_HAS_REC_O for it!
	if grep 'create .* -o prop' $zrep_checkfile >/dev/null ;then
		Z_HAS_REC_O=1 # can use recv -o
	fi
	if grep 'set .*snapshot' $zrep_checkfile >/dev/null ;then
		Z_HAS_SNAPPROPS=1 # can set properties on snapshots
	fi
	if grep 'list.*-d' $zrep_checkfile >/dev/null ;then
		DEPTHCAP="-d 1" # limits "list -r"
	else
		DEPTHCAP=""
		print WARNING: old ZFS version detected with no depth protection
		print WARNING: You may not nest zrep managed filesystems
	fi
fi

if ((!Z_HAS_SNAPPROPS)) ; then
	PROPTYPES="local"
fi

rm $zrep_checkfile


Z_LOCK_RETRY=${Z_LOCK_RETRY:-10}  # default 10 second  retry, 1 per sec
Z_SAVE_COUNT=${Z_SAVE_COUNT:-5}
Z_GLOBAL_LOCKFILE=$ZREP_RUNDIR/zrep.lock

if [[ "$Z_GLOBAL_PID" == "" ]] ; then
	export Z_GLOBAL_PID=$$
fi

Z_SETHOLD=${Z_SETHOLD:-"zfs hold"}
# if your zfs isnt new enough, and you like to live dangerously, 
# you can skip setting holds by using this instead.
# Although I may not have gotten around to using this in the code either!
#Z_SETHOLD="echo skipping zfs hold on"


# return PID of proc holding global lock, or nothing
zrep_global_lock_pid(){
	$LS -l $Z_GLOBAL_LOCKFILE 2>/dev/null |awk -F/ '{print $NF}'
}

# return 0 if "we" are holding lock, 1 otherwise
# Note that we check for "us, OR our global parent", if different
#
zrep_has_global_lock(){
	lockpid=`zrep_global_lock_pid`

	if [[ "$lockpid" == "" ]] ; then return 1 ; fi
	if [[ "$lockpid" != "$Z_GLOBAL_PID" ]] ; then
		if [[ "$lockpid" != "$$" ]] ; then
			_debugprint 'has_global_lock? no. lock held by PID' $lockpid
			return 1
		fi
	fi

	return 0
}



#Note: it is an ERROR to call this if you already have lock
#It is binary, not recursive ownership.
zrep_get_global_lock(){
	typeset retry_count=$Z_LOCK_RETRY
	typeset lockpid


	[[ -d /proc/$$ ]] || zrep_errquit "/proc fs must be functional to use zrep"

	ln -s /proc/$Z_GLOBAL_PID $Z_GLOBAL_LOCKFILE && return 0

	# otherwise, deal with fail
	# Careful of race conditions on stale CLEAN UP!
	# How to resolve problem where
	# * multiple instances running
	# * one instance detects stale
	# * multiple instances decide to remove it
	# *  ONE removes it and creates new symlink
	# *  SECOND one was paused between detection and removal.. so removes
	# * VALID lockfile?!?!
	# For now, must request manual cleanup
	while (( retry_count > 0 )); do
		sleep 1
		ln -s /proc/$Z_GLOBAL_PID $Z_GLOBAL_LOCKFILE && return 0
		retry_count=$((retry_count-1))
		lockpid=`zrep_global_lock_pid`
		if ! -d /proc/$lockpid ; then
			_errprint ERROR: stale global lock file
			_errprint ERROR: shut down ALL zrep instances, then manually remove
			_errprint $Z_GLOBAL_LOCKFILE
		fi

	done

	print Failed to acquire global lock 
	return 1
}

zrep_release_global_lock(){
	if zrep_has_global_lock ; then
		rm $Z_GLOBAL_LOCKFILE
		return $?
	else
		print ERROR: zrep_release_global_lock called, but do not own lock
		return 1
	fi
}

# returns PID of zrep process holding a lock on filesystem, if there is one.
# NOTE: If "-s local" used, prints "" if lock unheld
# If no -s specified, prints "-" if lock unheld
zrep_fs_lock_pid(){
	$ZFSGETLVAL ${ZREPTAG}:lock-pid $1
}
zrep_has_fs_lock(){
	typeset check=`$ZFSGETLVAL ${ZREPTAG}:lock-pid $1`
	if ((check == $$)) ; then
	return 0
	else
	return 1
	fi
}

# use global lock first (if not already), then
# grab lock on individual fs
# return 1 on fail, 0 on lock acquired
# Note that it is an ERROR to call this, if you already have lock
# Note2: if a dead process has lock, it will forcibly override and
# acqure lock
zrep_lock_fs(){
	# global lock is slow. so do quickcheck first.
	typeset check=`zrep_fs_lock_pid $1` newcheck
	if [[ "$check" != "" ]] ; then
		# See if owning process still exists.
		ls -d /proc/$check >/dev/null 2>&1 && return 1
	fi

	zrep_get_global_lock
	if [[ $? -ne 0 ]] ; then
		if [[ "$DEBUG" != "" ]] ; then
		_errprint zrep_lock_fs: failed to get global lock. PID=$$ fs=$1
		fi
		return 1
	fi

	# Double-check if needed, now that we have global lock
	if [[ "$check" != "" ]] ; then
		newcheck=`zrep_fs_lock_pid $1`
		if [[ "$newcheck" != "$check" ]] && [[ "$newcheck" != "" ]]
		then
			# oops. someone else must have dealt with it.
			# If they havent reset it then give up
			zrep_release_global_lock
			return 1
		fi
		# Keep in mind that stdin/out could be busy
		# Cant use regular debugprint
		if [[ "$DEBUG" != "" ]] ; then
			_errprint  overiding stale lock on $1 from pid $check
		fi
	fi
	
	zfs set ${ZREPTAG}:lock-pid=$$ $1
	zfs set ${ZREPTAG}:lock-time=`date +%Y%m%d%H%M%S` $1
	if [[ "$DEBUG" != "" ]] ; then
		_errprint DEBUG: zrep_lock_fs: set lock on $1
	fi
	zrep_release_global_lock 
}

# release lock, if we have it.
# Since this could be called by an exit cleanup routine blindly,
# dont exit program if we dont have lock. But do return error
zrep_unlock_fs(){
	typeset lockpid=`zrep_fs_lock_pid $1`
	if ((lockpid != $$)) ; then return 1; fi

	#since "we" already have it locked, no need to get global lock first
	zfs inherit ${ZREPTAG}:lock-time $1
	zfs inherit ${ZREPTAG}:lock-pid $1
	if [[ "$DEBUG" != "" ]] ; then
		_errprint zrep_unlock_fs: unset lock on $1
	fi

	return 0
}


# Quit whole program with error status, outputting args to stderr
# Release global lock if we are holding it
#   Unless we're running in parallel batch mode
#   I'll need to plan that out more carefully!
#
zrep_errquit(){
	_errprint Error: "$@"

	if zrep_has_global_lock ; then
		if [[ "$$" -ne "$Z_GLOBAL_PID" ]] ; then
			print EXTRA-ERROR: Running in child proc.
			print 'Not sure whether to release global lock. NOT releasing!'
			exit 1
		else

			zrep_release_global_lock
		fi
	fi
	exit 1
}

# Optimization wrapper for ssh: if destination host is ourself, dont use ssh.
# Just run the local command mentioned
# Be careful about quotes here. In fact, try not to use any.
# Usage:  zrep_ssh desthost  commands_for_ssh go_here
zrep_ssh(){
	typeset ssh_cmd
	case "$1" in
		localhost|$Z_LOCAL_HOST)
			ssh_cmd="eval"
			;;
		*)
			# by default, DEBUG doesnt get passed through ssh
			ssh_cmd="$SSH $1 DEBUG=${DEBUG}"
			;;
	esac
	shift
	$ssh_cmd "$@"
}

zrep_gettimeinseconds(){
	# unfortunately, solaris date doesnt do '%s', so need to use perl
	typeset seconds
	typeset PATH=$PERL_BIN:$PATH
	seconds=`perl -e 'print int(time);' 2>/dev/null`
	if [[ -z "$seconds" ]] ; then
		# attempt fallback if no perl present (eg: stock FreeBSD)
		seconds=`date +%s`
	fi
	if [[ -z "$seconds" ]] ; then
		zrep_errquit zrep_gettimeinseconds doesnt know what to do
	fi
	print $seconds
}

_debugprint(){
	if [[ "$DEBUG" != "" ]] ; then
	   print DEBUG: $@
	fi	 
}

# This consolidated function is both for prettiness, and also
# to make dealing with github issue #22 easier, about redirecting stderr
_errprint(){
	print $@ >/dev/fd/2

}
###### zrep_status

# be sure to have included zrep_vars

# This file contains all "status" related routines.
# It should be folded into final "zrep" script




#
#Give this a top level zrep registered filesystem, NOT snapshot.
# Will print out various status points, such as last sync date.
# Or if given no args, will print out sync date for all zrep mastered fs
# Note that the date given is time of SNAPSHOT, not time sync completed.
#
zrep_status(){
	typeset check fs srcfs jdesthost destfs date lastsnap verbose=0
	typeset printall=0
	
	if [[ "$1" == "-v" ]] ; then
		verbose=1 ; shift
	fi

	if [[ "$1" == "" ]] ; then
		set -- `zrep_list_master`
	elif [[ "$1" == "-a" ]] ; then
		set -- `zrep_list`
		printall=1
	fi

	while [[ "$1" != "" ]] ; do
		fs="$1"

		destfs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $fs`
		if [[ "$destfs" == "-" ]] || [[ "$destfs" == "" ]]; then
			zrep_errquit "$fs is not a zrep registered filesystem"
		fi

		lastsnap=`getlastsnapsent $fs`
		if [[ "$lastsnap" == "" ]] ; then
			date="[NEVER]"
		else
			date=`zfs get -H -o value creation $lastsnap`
		fi
		if ((printall)) && ((verbose)) ; then
			# If we are printing out  ALL filesystems,
			# then we have to make sure left side is always
			#  "src filesystem", not "named filesystem"
			# then we have to check what the src fs is
			srcfs=`$ZFSGETVAL ${ZREPTAG}:src-fs $fs`
		else
			# Yes, okay, if -a is used, then
			# technically, this isnt always "src".
			# but it prints out right, so close enough :)
			srcfs="$fs"
		fi

		if ((verbose)) ; then
			desthost=`$ZFSGETVAL ${ZREPTAG}:dest-host $srcfs`
			printf "%-25s->%-35s %s\n" $srcfs "$desthost:$destfs" "${date#????}"
		else
			printf "%-47s" $srcfs
			print "last synced $date"
		fi
		shift
	done
}


_master_fs_names(){
	zfs get -H -o name -s local ${ZREPTAG}:master "$@"
}


# convenience function to list only local filesystems for which we are
# zrep master for.
# In contrast, zrep_list, lists ALL zrep registered filesystem, at the moment.
# 
# Annoyingly... it would be way faster if we could just stick with the
# pure "zfs get" implementation, but we also need to deal with the zone
# issue. When a single zfs filesystem is visible aross multiple zones,
# we dont want them all thinking they are master
#
# Durn. Individual validation required.
zrep_list_master(){
	typeset srchost
	for fs in `_master_fs_names "$@"` ; do
		srchost=`$ZFSGETVAL ${ZREPTAG}:src-host $fs`
		if [[ "$srchost" == "$Z_LOCAL_HOST" ]] ; then
			print $fs
		fi
	done
}


# Given ONE filesystem, print all zrep properties for it.
# Note that this is internal routine. we do not validate input.
list_verbose(){
	print $1:
		# sneaky cheat: only user-set properties will
		# match these 'source' types. So "grep zrep:" is not
		# neccessary. Although we may pick up other user-set values,
		# but that is not neccessarily a bad thing
	zfs get -H -o property,value -s $PROPTYPES all $1
	print "last snapshot synced: `getlastsnapsent $1`"

}


# Note: called by both user, AND by zrep_status
#
# Usage:
# zrep_list [-v]
# zrep_list [-L]
# zrep_list [-v] fs1 fs2
#(also zrep_list -s which passes to zrep_list_snaps)
#
# list all zrep-initialized filesystems (NOT snapshots..)
# If no specific fs listed, will show master, AND received filesystems,
#    unless -L given (in which case, only local masters will be shown)
#
# Normal output is one line per fs.
#
#  -v gives all properties of each filesystem
#  Give only one of -L or -v 
#
zrep_list(){
	typeset fslist="" verbose=0
	# This works because we only set this property on the actual fs.
	# "source type" on snapshots for this property is "inherited" not local
	#  or "received"
	typeset printcmd="zfs get -H -o name -s $PROPTYPES ${ZREPTAG}:dest-fs"

	case $1 in
		-v)
		verbose=1
		printcmd=list_verbose
		shift
		;;
		-L)
		# reminder: cant have this, AND verbose.
		printcmd="zrep_list_master"
		shift
		;;
		-s)
		shift
		zrep_list_snaps "$@"
		return
		;;
	esac


	# If specific fs(s) named, iterate over them and quit
	if [[ "$1" != "" ]] ; then
		while [[ "$1" != "" ]] ; do
			if zfs list -t filesystem,volume $1 >/dev/null 2>&1 ; then
				$printcmd $1
			else
				zrep_errquit "Expecting filesystem, but got $1"
			fi
			shift
		done
		return
	fi

	# Must be "list all" now. But which output format?

	# If not verbose, we have a nice shortcut to just list
	# all filesystems that zrep has marked.
	if (( $verbose == 0))  ; then
		$printcmd
		return
	fi


	# oh well. have to step through them one by one now, to
	# print out the properties associated with each zrep filesystem

	fslist=`zfs get -H -o name -s $PROPTYPES ${ZREPTAG}:dest-fs`

	for fs in $fslist ; do
		$printcmd $fs
		print ""
	done
	
	
}

# Similar to zrep_list, but lists SNAPSHOTS instead of filesystems
# The purpose is to allow a sysadmin to see easily when snapshots have
# been created.
# Either give a list of specific filesystems, or no args, which
# will attempt to list all zrep-related snapshots
# It will list only zrep MASTER filesystem snapshots, in that case.
zrep_list_snaps(){
	if [[ "$1" == "" ]] ; then
		set -- `_master_fs_names`
		if [[ "$1" == "" ]] ; then
			_errprint "No zrep master filesystems found"
			return 0
		fi
	fi

	while [[ "$1" != "" ]] ; do
	      zfs list -r -t snapshot -o name,creation $1
	      shift 
	done
	
}

################ zrep_snap
# be sure to have included zrep_vars

# This file contains routines related to 
# "make new snapshot, using next sequence number".
# So it thus includes all snap sequence related routines
# It may contain "sync snapshot" related routines for now.
# It also is definitive for the format of snapshot names
# It also contains most "query status of snaps" type routines,
#  such as "getlastsnapsent"
#
# Normal style for making a snapshot and syncing it:
#   1.  create a snapshot.
#   2.  sync it over
#   3.  set "zrep:sent" on *snapshot*, with timestamp in seconds
# Old-nasty-zfs compat mode:
#   Step 3. Add/update "zrep:lastsent->snapname", and 
#           "zrep:lastsenttime->timestamp",  on *filesystem*
#
######################################################################


# By observation, 'zfs list' shows snapshots order of creation.
# last listed, should be last in sequence.
# But, dont take chances!!
getlastsequence(){
	typeset lastval
	#remember, filesystems can have '_' in them
	getlastsnap $1|sed 's/.*@'${ZREPTAG}'_\(......\).*/\1/'
}

# prints out last snapshot zrep created, going purely by sequence.
# Note: "last created", which may or may NOT be "last successfully synced". 
# This is basically "getallsnaps |tail -1"
getlastsnap(){
	zfs list -t snapshot -H -o name $DEPTHCAP -r $1 |
	   sed -n "/@${ZREPTAG}_[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]/"p |
	   sort | tail -1
}

# Usage:   getlastsnapsent zpool/FSNAME
getlastsnapsent(){
	# arg.  more efficient if we can just return value directly,
	# but i'm using backwards compat :(
	typeset lastsent
	lastsent=`zfs get  -H -o name -r -s local ${ZREPTAG}:sent $1 |
	   sort | tail -1`
	if [[ "$lastsent" != "" ]] ; then
		print $lastsent
		return
	fi

	# Fallback method, for backwards compat with older ZFS code,
	# since it cant set properties on snapshots
	zfs get  -H -o value -s local ${ZREPTAG}:lastsent $1
}

# outputs time in seconds, of when the last successful sync for the
# filesystem was done. (in format compatible with zrep_gettimeinseconds() )
#  Note that this is time of actual sync, not snapshot creation time.
#
# This unfortunately needs to be compatible with both new way, and
# old-nasty-hack-way
# 
# In future, may take optional argument of which HOST to check 
# sync with. But since I currently only suport one host per fs... oh well.
# If never synced, will return 1, and print ""
#
getlastsynctime(){
	typeset fs lastsent senttime

	if [[ "$1" == "" ]] ; then
		zrep_errquit Internal error: no arg to getlastsynctime
	fi
	fs="$1"

	# Deal with possibly upgraded system;
	#   Check "lastsent", only as fallback.

	# copy from getlastsnapsent, but only using newest method
	lastsent=`zfs get  -H -o name -r -s local ${ZREPTAG}:sent $fs |
	   sort | tail -1`
	senttime=`zfs get  -H -o value ${ZREPTAG}:sent $lastsent`
	if [[ "$senttime" != "" ]] ; then print $senttime ; return 0; fi

	# ooops. try fallback to nasty old zfs-compat style
	senttime=`zfs get -H -o value ${ZREPTAG}:lastsent $fs`
	print $senttime
	if [[ "$senttime" != "" ]] ; then return 0; fi
	return 1
}

#This is for synctosnap, and also zrep_expire
getallsnaps(){
	zfs list -t snapshot -H -o name $DEPTHCAP -r $1 |
	   sed -n "/@${ZREPTAG}_[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]/"p |
	   sort
}

# list all snapshots of the given filesystem, that are made by this prog
# arg: fs
list_autosnaps(){
	if [[ "$1" == "" ]] ; then
		zrep_errquit "zrep internalerror: no arg for list_autosnaps"
	fi
 	zfs list $DEPTHCAP -r -H -o name -t snapshot $1 |
		grep "@${ZREPTAG}_[0-9a-f][0-9a-f]"
	# Make sure this format matches other routines in here
	# Okay to just check first few digits though
}

# User entrypoint. Part of pair: snaponly, sendonly
# Just makes snapshot. 
zrep_snaponly(){
	typeset srcfs

	while [[ "$1" != "" ]] ; do
		srcfs="$1" ;shift
		zrep_lock_fs $srcfs
		if [[ $? -ne 0 ]] ; then
			# this function is supposed to be coordinated by user
			# therefore, if something else is competing,
			# coordination has failed. no retry.
			zrep_errquit zrep snaponly failed for $srcfs: cannot get lock
			
		fi

		makesnap $srcfs ||zrep_errquit snaponly for $srcfs failed

		zrep_unlock_fs $srcfs
		
	done	
}

# 
# creates next snapshot in sequence
# consider holding lock here
# Caller must have zrep lock on filesystem:
#   we verify with zrep_has_fs_lock
makesnap(){
	typeset  check oldseq newseq="" newseqX newsnap

	#sanity checks first!
	check="`$ZFSGETVAL ${ZREPTAG}:src-host $1`"
	if [[ "$check" != "$Z_LOCAL_HOST" ]] ; then
		_errprint ERROR: we are not master host for $1
		_errprint print master is $check, we are $Z_LOCAL_HOST
		exit 1
	fi

	zrep_has_fs_lock $1
	if [[ $? -ne 0 ]] ; then
		_errprint Internal error:  makesnap fail, no lock on $1
		exit 1
	fi

	oldseq=`getlastsequence $1`
	newseq=$((0x$oldseq))

	newseqX=$(printf "%.6x" $(($newseq + 1))  )


	#_errprint DEBUG old=$oldseq new=$newseqX
	newsnap="$1@${ZREPTAG}_$newseqX"
	
	zfs snapshot $Z_SNAP_R $newsnap
	if [[ $? -eq 0 ]] ; then
		print  $newsnap; return 0
	else
		return 1
	fi
	
}

## This is the implentation for the "zrep clear" command
## Purpose is to remove all zrep related hooks from a local filesystem. 
##  (NOT delete it)
## Will remove zrep snapshots and zfs zrep: properties
zrep_clear(){
	if [[ "$1" == "-f" ]] ; then
		print "WARNING: Removing all zrep configs and snapshots from $2"
		_clear $2
		return
	fi

	print "WARNING: Removing all zrep configs and snapshots from $1"
	print " (for TAG=${ZREPTAG})"
	print Continuing in 10 seconds
	sleep 10
	_clear $1
}

_clear(){
	print Destroying any zrep-related snapshots from $1
	snaplist=`list_autosnaps $1`
	for snap in $snaplist ; do
		zfs destroy -r $snap
	done

	print Removing zrep-related properties from $1
	proplist=`zfs get -H -o property all $1|grep ${ZREPTAG}:`
	for prop in $proplist ; do
		zfs inherit $prop $1
	done
}

## This is a special internal routine, used only by zrep_init, 
## to reset target fs to pre-zrep state.
## call with "srcfs  errmsg1 errmsg2..."
## It will also REMOVE REMOTEFS if set in PROPERTIES!!
clearquit(){
	remhost=`$ZFSGETVAL ${ZREPTAG}:dest-host $1`
	remfs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $1`
	if [[ $? -eq 0 ]] && [[ "$remhost" != "-" ]] && [[ "$remfs" != "-" ]]; then
		zrep_ssh $remhost zfs destroy -r $remfs
	fi

	_clear $1
	shift
	zrep_errquit "$@"
}


# Shared internal routine.
#  (internal only to zrep_snap, even!)
#
# Set the to/from properties on a fs for zrep
# Called by zrep_init  and zrep_changeconfig
# Usage: 
#  setfsconfigs srcfs desthost destfs
#  setfsconfigs -d destfs srchost srcfs
#
setfsconfigs(){
	typeset srchost srcfs desthost destfs fsname

	if [[ "$1" == "-d" ]] ; then
		srchost="$3"
		srcfs="$4"
		desthost=$Z_LOCAL_HOST
		destfs="$2"
		fsname=${destfs}
	else
		srchost=$Z_LOCAL_HOST
		srcfs="$1"
		desthost="$2"
		destfs="$3"
		fsname=${srcfs}
	fi


	if [[ "$destfs" == "" ]] ; then
		zrep_errquit "zrep: no dest fs specified"
	fi
	zfs list $fsname >/dev/null ||zrep_errquit "filesystem $fsname must exist already"

	#
	# This is really only for when we are called from init I think?
	#
	case $destfs in
		# Originally, I had this passthrough only if fsname was at end
		# However,we must allow destfs to have different leaf name,
		# for circumstances such as replication to same host
		*/*)
			:
			;;
		*)
			# Only the pool name given. Let's make it explicit.
			# Sadly this wont work if intermediary root
			# is given. which is technically legal.
			typeset basefs=${fsname##*/}
			destfs=$destfs/$basefs
			;;
	esac

	zfs set ${ZREPTAG}:src-fs=$srcfs		$fsname
	zfs set ${ZREPTAG}:src-host=$srchost		$fsname
	zfs set ${ZREPTAG}:dest-fs=$destfs		$fsname
	zfs set ${ZREPTAG}:dest-host=$desthost		$fsname
	zfs set ${ZREPTAG}:savecount=$Z_SAVE_COUNT	$fsname
}


#
# Old way used to use recv -x, but not all systems have that. so
# preferred method is now to use recv -u instead.
# To init from existing snapshot instead, see documention at bolthole.com
# Note that remote fs must share same stem name as source. (for now?)
#
zrep_init(){
	typeset srcfs="$1" desthost="$2" destfs="$3" snap check vol=0
	typeset mountpoint vflags

	if [[ "$srcfs" == "" ]] ; then
		zrep_errquit "zrep: no fs specified"
	fi

	#sanity checks
	check="`$ZFSGETVAL ${ZREPTAG}:dest-fs $srcfs`"
	if [[ "$check" != "-" ]] ; then
		print "$srcfs is at least partially configured by zrep"
		check="`$ZFSGETLVAL ${ZREPTAG}:master $srcfs`"
		if [[ "$check" != "" ]] ; then
			zrep_errquit "${ZREPTAG}:master detected!!"
		fi
		zrep_errquit "To re-initialize, first use zrep clear $srcfs"
	fi
	check="`zfs get -H -o value type $srcfs`"
	if [[ "$check" == "volume" ]] ; then
		vol=1
		if (( ! Z_HAS_REC_O )) ; then
			echo WARNING: no proper recv -o detected
			echo WARNING: extremely old versions of ZFS crash with volume init
			echo Continuing in 5 seconds....
			sleep 5
			vflags="`zfs get -H -o value volsize $srcfs`"
			vflags="-V $vflags"


		fi
		# for details,see
		#  https://groups.google.com/forum/#!topic/comp.unix.solaris/-5bcZFInozk
		# subject:"solaris 11 crash when zfs send/receive of volume"
	fi
	

	print Setting properties on $srcfs
	setfsconfigs $srcfs $desthost $destfs

	#setfsconfigs may do some "smarts" to adjust value, so get it again.
	# yes only check for LOCAL this time. Paranoia....
	destfs=`$ZFSGETLVAL ${ZREPTAG}:dest-fs $srcfs`

	#get this for later
	mountpoint=`$ZFSGETLVAL mountpoint $srcfs`

	if (( Z_HAS_REC_O )) ; then
		READONLYPROP="-o readonly=on"
	else
		READONLYPROP=""
		print Warning: zfs recv lacking -o readonly
		print Creating readonly destination filesystem as separate step
		zrep_ssh $desthost zfs create $ZREP_CREATE_FLAGS -o readonly=on $vflags $destfs || zrep_errquit "Cannot create $desthost:$destfs"
	fi

	snap="${srcfs}@${ZREPTAG}_000000"
	print Creating snapshot $snap
	zfs snapshot $Z_SNAP_R $snap || clearquit $srcfs "Cannot create initial snapshot $snap"

	# Note that we may not want to use -p for normal zrep syncs
	# We also should not use -F for normal recv. See workflow.txt
	# Note: we may have to reset readonly=on, if we used -p on send...
	#
	print Sending initial replication stream to $desthost:$destfs
	if (( $Z_HAS_REC_U )) ; then
		# This is the nice, clean, modern codepath, to send
		# zrep settings over automatically at first init.
		# Note that we use "zfs send -p" to preserve properties.
		#

		if [[ "$BBCP" != "" ]] ; then
		$BBCP -N io "zfs send ${ZREP_R} -p $snap" \
		    "$desthost:zfs recv -u  $READONLYPROP -F $destfs"
		else
		eval zfs send ${ZREP_R} -p $snap ${Z_F_OUT}|
			zrep_ssh $desthost "${Z_F_IN} zfs recv -u $READONLYPROP -F $destfs"
		fi
	else
		## arg.. Update your systems!!
		# without -u, risky to use send -p if mountpoint set.
		#  (So we cant avoid it potentially WRONGLY setting mountpoint)
		# This means we have to manually set props lower down as well.
		# (yeah okay I could check if $mountpoint set, but
		#  there are too many code branches here already, so too bad!
		#  Update your system! :p )
		#
		if [[ "$BBCP" != "" ]] ; then
		$BBCP -N io "zfs send ${ZREP_R} $snap" \
		    "$desthost:zfs recv $READONLYPROP -F $destfs"
		else
		eval zfs send ${ZREP_R} $snap ${Z_F_OUT}|
		  zrep_ssh $desthost "${Z_F_IN} zfs recv $READONLYPROP -F $destfs"
		fi
	fi
	if [[ $? -ne 0 ]] ; then
		clearquit $srcfs "Error transferring $snap to $desthost:$destfs. Resetting"
	fi

	# Successful initial sync! Woo! okay record that, etc.
	# ... after stupid old-zfs-compat junk, that is
	if (( ! Z_HAS_REC_U )) ; then
		_debugprint Because your zfs does not have recv -u, setting remote properties by hand
		zrep_ssh $desthost zfs set readonly=on $destfs	||
			clearquit Could not set readonly for $desthost:$destfs

		zrep_ssh $desthost zfs set ${ZREPTAG}:src-fs=$srcfs $destfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:src-host=$Z_LOCAL_HOST $destfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:dest-fs=$destfs $destfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:dest-host=$desthost $destfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:savecount=$Z_SAVE_COUNT	$destfs

	fi

	# Success! So need to set success marker on remote side.
	# Make sure to set format to match what zrep_sync() looks for!
	if (( Z_HAS_SNAPPROPS )) ; then
		typeset sentprop="${ZREPTAG}:sent=`zrep_gettimeinseconds`"
		zfs set $sentprop ${snap}
	else
		# Arg stupidold stuff cant set props on a snapshot
		# So we have to manually set these on both sides also,
		# "Just in case"
		zfs set ${ZREPTAG}:lastsent=${snap} $srcfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:lastsent=${snap} $destfs
	fi
	if [[ "$mountpoint" != "" ]] ; then
		print "clearing mountpoint value for remote"
		zrep_ssh $desthost zfs inherit mountpoint $destfs
	fi

	# make sure the above ' set 's (sent, lastsent)
	# match what zrep_sync() does !!!


	# Note: we have to set master property NOW, not before,
	# because "recv -x zrep:master" Does Not Work properly
	# Also, it avoids things like "zrep sync all" from attempting
	# to sync it before initial sync has been done.
	# We don't even have to zrep_lock_fs until this is set
	#  Make sure value this matches zrep_sentsync
	zfs set ${ZREPTAG}:master=yes	$srcfs

	print Initialization copy of $srcfs to $desthost:$destfs complete
	if (( $Z_HAS_REC_U )) ; then
		print Filesystem will not be mounted
	fi

}


zrep_changeconfig(){
	if [[ "$1" == "-f" ]] ; then
		# skip safety checks
		shift
		setfsconfigs $@
		return 
	fi
	typeset srcfs="$1" check
	
	if [[ "$srcfs" == "" ]] ; then
		zrep_errquit "zrep: no fs specified"
	fi

	check=`getlastsnap $srcfs`
	if [[ "$check" == "" ]] ; then
		_errprint "No pre-existing zrep snapshots found on $srcfs"
		_errprint $srcfs is not initialized for zrep. cannot change config.
		zrep_errquit Use zrep init on $srcfs instead
	fi

	setfsconfigs $@
	
}



##### zrep_sync

# contains meat of the "sync" level operations, which deal with
# data transfer.
# basic snap routines, and init routines, are in zrep_snap



## file-internal routine that gets used a lot in zrep_sync
_gensentprop(){
	typeset timeinsec=`zrep_gettimeinseconds`
	print "${ZREPTAG}:sent=$timeinsec"
}


# This is a RECOVERY ROUTINE ONLY.
# I put lots of sanity checking in here, that doesnt make sense to keep
# with a more general case internal routine
# Certain people say that for some odd reason on their systems, the 
# zfs send completes, but zrep gets killed before zrep updates properties.
# To help people save the time on resyncing hundreds of TB, 
# give them a way to update the sent property.
# This only works with newstyle ZFS that allows property setting on snapshots
# Needs to follow whatever is done in _sync(), after the zfs send
#
zrep_sentsync(){
	typeset srcsnap="$1"
	typeset srcfs=${srcsnap%@*}
	typeset snapname=${srcsnap#*@}

	if (( ! Z_HAS_SNAPPROPS )) ; then
		zrep_errquit This sentsync operation only supported with modern ZFS implementations
	fi

	zfs list -t snapshot "$1" >/dev/null 2>&1
	if [[ $? -ne 0 ]] ; then
		zrep_errquit Expected snapshot for $1. Cannot continue
	fi
	case "$1" in
		*@${ZREPTAG}_[0-9]*)
		:
		;;
		*)
		zrep_errquit $1 does not follow zrep naming standards. Cannot continue
		;;
	esac

	typeset sentcheck=`$ZFSGETLVAL ${ZREPTAG}:sent $srcfs`
	if [[ "$sentcheck" != "" ]] ; then
		zrep_errquit ${ZREPTAG}:sent already present on $srcfs
	fi

	typeset desthost destfs
	desthost=`$ZFSGETVAL ${ZREPTAG}:dest-host $srcfs`
	destfs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $srcfs`

	typeset	senttimeprop="`_gensentprop`"

	zrep_ssh $desthost zfs set $senttimeprop $destfs@$snapname

	zfs set $senttimeprop  ${srcsnap}
	# This will be redundant for recovery, but crucial for when
	# user is trying to convert existing snapshot to
	# zrep snapshot.
	# Make sure it matches  zrep_init
	zfs set ${ZREPTAG}:master=yes	${srcfs}

	
}

####################
# synctosnap: called by zrep_sync, if a specific snapshot is specified.
#
# This LOCAL side, *and*  REMOTE side, match up with local zrep_created 
# snapshot. ...
# 
# Note that it uses zrep_lock_fs
#
# WARNING: if we force other side to roll to snap.... 
#  we should NOT BE SYNCING ANY more.
# At the moment, it is up to the user to ensure that nothing is going on 
# locally, and future zrep syncs wont just effectively roll forward again
#  on the remote side.
# zrep sync jobs  should probably be halted, until it is decided that
# you want to sync again.
#
# In the future, I should support some kind of "pause" option, for 
#   zrep sync all    to ignore a rolled back filesystem
#
#
synctosnap(){
	typeset srcsnap=$1 destfs=$2 desthost=$3
	typeset newsentlist

	typeset srcfs snapname destsnap
	if [[ "$desthost" == "" ]] ; then
		print ERROR: synctosnap did not receive all required args
		zrep_errquit "args=$@"
	fi
	srcfs=${srcsnap%@*}
	snapname=${srcsnap#*@}
	destsnap=${snapname}

	# Have to enforce OUR syntax. otherwise, any future attempt to
	# continue sync will fail.
	#  ( getlastsnap() wont find it! )
	#
	case $snapname in
		zrep_[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]*)
		: ;;
		*)
			zrep_errquit $srcsnap is not zrep snapshot. Cannot roll with it.
		;;
	esac
		
		

	print Validating remote snap
	zrep_ssh $desthost zfs list -t snapshot $destfs@$destsnap >/dev/null
	if [[ $? -ne 0 ]] ; then
		zrep_errquit  $destfs@$destsnap does not exist. Cannot roll to snap
	fi
	

	print "WARNING: We will be rolling back  $destfs, on $desthost"
	print -n "   to  $snapname, made at: "
	zfs get -H -o value creation $srcsnap
	print ""
	print "All newer snapshots on remote side will be destroyed"
	print "You should have paused ongoing sync jobs for $destfs before continuing"
	print "Continuing in 20 seconds...."
	sleep 10
	print "Continuing in 10 seconds...."
	sleep 10

	zrep_lock_fs $srcfs || zrep_errquit "Cannot lock $srcfs"
	zrep_ssh $desthost zfs rollback -Rr $destfs@$destsnap || zrep_errquit roll failed

	print $desthost:$destfs rolled back successfully to $destsnap
	print Now cleaning up local snapshots

	# need to undo whatever zrep_sync does 
	newsentlist=`getallsnaps $srcfs|sed "1,/@$snapname/d"`
	for snap in $newsentlist ; do
		zfs inherit ${ZREPTAG}:sent $snap
	done

	zrep_unlock_fs $srcfs
	
}

# Usage: _snapandsync  fs desthost destfs
# internal routine called by zrep_sync and zrep_failover,
# to do an incremental send.
# You must hold filesystem lock before calling this
# WE DO NOT DO ANY SAFETY OR LOCK CHECKS HERE.
#
# Wil create a new snap on srcfs, and sync it over to given destination
# Sets our 'synced' marker on it as well.
#
_snapandsync(){
	typeset srcfs=$1 desthost=$2 destfs=$3

	typeset sentsnap newsnap snapname



	#srchost=`$ZFSGETVAL ${ZREPTAG}:src-host $srcfs`
	#if [[ "$srchost" != "$Z_LOCAL_HOST" ]] ; then
	#	zrep_errquit _sync: We are not master for $srcfs
	#fi


	# Find incremental send starting point
	# Do this BEFORE creating new snap, because we should make new snap
	# if we cant do incremental anyway
	sentsnap=`getlastsnapsent $srcfs`
	if [[ "$sentsnap" == "" ]] ; then
		print zrep_sync could not find sent snap for $srcfs. 
		zrep_errquit You must initialize $srcfs for zrep
	fi

	newsnap=`makesnap $srcfs`
	if [[ "$newsnap" == "" ]] ; then
		zrep_errquit zrep_sync could not create new snapshot for $srcfs
	fi

	_sync $srcfs $desthost $destfs $sentsnap $newsnap

}

# called by _snapandsync, and also zrep_synconly
# 	Usage: sourcefs destinationhost destinationfs (lastsent (newsnap))
_sync(){
	typeset srcfs=$1 desthost=$2 destfs=$3
	typeset lastsent=$4 newsnap=$5
	typeset snapname

	if [[ "$lastsent" == "" ]] ; then
		lastsent=`getlastsnapsent $srcfs`
		if [[ "$lastsent" == "" ]] ; then
			print zrep_sync could not find sent snap for $srcfs. 
			zrep_errquit You must initialize $srcfs for zrep
		fi
	fi

	if [[ "$newsnap" == "" ]] ; then
		newsnap=`getlastsnap $srcfs`
		if [[ "$newsnap" == "" ]] ; then
			print zrep_sync could not find sent snap for $srcfs. 
			zrep_errquit You must initialize $srcfs for zrep
		fi
	fi

	if [[ "$newsnap" == "$lastsent" ]] ; then
		print $newsnap already sent
		return 0
	fi

	snapname=${newsnap#*@}

	print sending $newsnap to $desthost:$destfs
	typeset timeinsec=`zrep_gettimeinseconds`
	typeset senttimeprop="${ZREPTAG}:sent=$timeinsec"

	# Note: doing "-o $senttimeprop" sets prop on FILESYSTEM, not snap.
	# So we dont do that usually

	# other than zrep_init, this should be the ONLY place we do a send
	#   Sigh. but now we also do in _refreshpull
	if [[ "$BBCP" != "" ]] ; then
	        SENDCMD="zfs send ${ZREP_R} ${ZREP_INC_FLAG} $lastsent $newsnap"
		$BBCP -N io "$SENDCMD" \
		   "$desthost:zfs recv $destfs"
	else
		eval zfs send ${ZREP_R} ${ZREP_INC_FLAG} $lastsent $newsnap ${Z_F_OUT} | 
		   zrep_ssh $desthost "${Z_F_IN} zfs recv $destfs"
	fi

	# I rename this to _unsent rather than just delete, in case people are using zrep
	# for the DUAL use, of replication,
	# plus convenient user-based "oops" recovery from the automatic .zfs/snapshots directory
	if [[ $? -ne 0 ]] ; then
		zfs rename ${Z_SNAP_R} ${newsnap} ${newsnap}_unsent
		zrep_errquit Problem doing sync for $newsnap. renamed to ${newsnap}_unsent
	fi


	##################################################
	##### Okay. data sync completed. Now register that fact with ZFS properties.
	##### If you modify below here, you also need to update zrep_sentsync

	#Even if we are "old mode", other side may not be.
	# So try newer way first.
	zrep_ssh $desthost zfs set $senttimeprop $destfs@$snapname
	if [[ $? -ne 0 ]] ; then
		print WARNING: setting ${ZREPTAG}:sent failed on $desthost:$destfs@$snapname
		print Using fallback methods. You should go patch $destfs to have newer ZFS version
		zrep_ssh $desthost zfs set ${ZREPTAG}:lastsent=${newsnap} $destfs
		zrep_ssh $desthost zfs set ${ZREPTAG}:lastsenttime=${timeinsec} $destfs
	fi

	if (( Z_HAS_SNAPPROPS )) ; then
		zfs set $senttimeprop  ${newsnap}
	else
		#note that this is only for old-ZFS compatibility.
		# We dont really want to use this style if possible!
		zfs set ${ZREPTAG}:lastsent=${newsnap} $srcfs
		zfs set ${ZREPTAG}:lastsenttime=${timeinsec} $srcfs
	fi
}


#User entrypoint, for synconly, which is the pair of snaponly
zrep_synconly(){
#	annoyingly..need to make this almost identical to our current full
#	zrep_sync. but just skipping first steps :(
#	we can skip retries, though.
	typeset srcfs desthost destfs

	# at one point, accept multiple args. But not for now...?
	srcfs=$1

	[[ "$srcfs" == "" ]] && zrep_errquit No fileystem specified for synconly

	desthost=`$ZFSGETVAL ${ZREPTAG}:dest-host $srcfs`
	destfs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $srcfs`
	if [[ $? -ne 0 ]] || [[ "$desthost" == "-" ]] || [[ "$destfs" == "-" ]];
	then
		zrep_errquit Problem getting zrep properties for fs $srcfs
	fi

	zrep_lock_fs $srcfs
	if [[ $? -ne 0 ]] ; then
		zrep_errquit Failed to acquire zrep lock for $srcfs
	fi

	_sync $srcfs $desthost $destfs || zrep_errquit sync failed for $srcfs

	_expire $srcfs	#dont care so much if this fails

	zrep_unlock_fs $srcfs
}


#zrep_sync
# make a new snapshot and copy it over.
# Usage: zrep_sync [-q quiettime] (all|fs1 .. fsX)
# See workflow.txt 
# Will call synctosnap if a snapshot is given instead of fsname
# Normally, will bail out if another instance of zrep holds lock.
#   -q option says to check last update time of locked filesystems.
#   If sync more recent than given quiettime, then quietly ignore
#   
zrep_sync(){
	typeset srcfs destfs desthost sentsnap newsnap
	typeset quiettime=0

	if [[ "$1" == "-q" ]] ; then
		quiettime="$2"
		shift
		shift
		if (( quiettime < 30 )) ; then
			zrep_errquit "-q must use value greater than 30"
		fi
	fi

	if [[ "$1" == "all" ]] ; then
		set -- `zrep_list_master`
		if [[ "$1" == "" ]] ; then
			# Stay quiet, so we dont spew if in cron
			#print No zrep mastered filesystems found
			exit
		fi
	fi

	if [[ "$1" == "" ]] ; then
		_errprint Error: no filesystems specified for sync
		return 1
	fi

	while [[ "$1" != "" ]] ; do
	srcfs="$1" 

	[[ "$srcfs" == "" ]] && zrep_errquit No fileystem specified for sync

	desthost=`$ZFSGETVAL ${ZREPTAG}:dest-host $srcfs`
	destfs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $srcfs`
	if [[ $? -ne 0 ]] || [[ "$desthost" == "-" ]] || [[ "$destfs" == "-" ]];
	then
		zrep_errquit Problem getting zrep properties for fs $srcfs
	fi
	
	case $srcfs in
		*@*)
			synctosnap $srcfs $destfs $desthost
			return
			;;
	esac

	zrep_lock_fs $srcfs

	if [[ $? -ne 0 ]] ; then
		# retry for lock for a while, if (quiettime>0 )

		if ((quiettime==0)); then
			zrep_errquit Cannot lock $srcfs. Cannot continue
		fi
		typeset currtime=`zrep_gettimeinseconds`  snaptime elapsed

		snaptime=`getlastsynctime $srcfs`
		if (( snaptime == 0 )) ; then
			zrep_errquit quiet mode set, but no last snap for $srcfs
		fi

		elapsed=$((currtime - snaptime))
		if ((elapsed > quiettime)) ; then
			_debugprint $elapsed seconds have elapsed since last sync of $srcfs
			zrep_errquit quiet time limit of $quiettime seconds exceeded for busy fs $srcfs
		else
			print Quiet mode: skipping busy fs $srcfs at `date`
			return 
		fi
	fi

	_snapandsync $srcfs $desthost $destfs


	# Make this message match what zrep_expire uses..
	print Expiring zrep snaps on $srcfs
	_expire $srcfs

	zrep_unlock_fs $srcfs

	shift

	done

}



# zrep_refresh is a "pull" version of "zrep_sync"
# The concept is a bit of a hack.
# It primarily exists so people can run a secure backup server, that
# has ssh access to all hosts, but not vice versa
#
# Implementation is a bit sketchy. 
# For initial, non-optimal run, perhaps take advantage of
#    ssh host zrep synconly
# to avoid too much duplication of things?
# but will still need to set all the perms n things. Nastyyy..
# The MAIN nastiness, is that all our locks are on the "master" side.
# Which depends on the PID still being there!!
# But if we start now running things on the "slave" side.. 
# There is potential for problems
# Examine critical points and reasons for lock:
#   1. while doing analysis of which snap to send
#   2. to avoid paralel "zfs send"s running.
#   3. for update of timestamp
#
#   We can still wrap #1 and #2 in a single lock call. 
#    (and still on the src side!)
#   The ugly comes when updating zrep:sent. Dont want to update wrong snap!
#   So long as we do some kind of check to see that we're not going
#   backwards when we get lock a second time ... we should be relatively okay.
#   However.. for simplicity... going to just cross fingers and wrap
#   all three in single remote lock call, through _refreshpull
#
zrep_refresh(){
	typeset srcfs destfs desthost newsnap newseq master

	# for now, just handle ONE arg, not multiple fs list

	destfs="$1"
	if [[ "$1" == "" ]] ; then
		_errprint Error: no filesystems specified for refresh
		return 1
	fi

	master=`$ZFSGETLVAL ${ZREPTAG}:master $destfs`
	if [[ "$master" == "yes" ]] ; then
		zrep_errquit Sorry, you cant run refresh on a master mode fs $destfs
	fi

	srchost=`$ZFSGETVAL ${ZREPTAG}:src-host $destfs`
	srcfs=`$ZFSGETVAL ${ZREPTAG}:src-fs $destfs`

	zrep_lock_fs $destfs
	if [[ $? -ne 0 ]] ; then
		zrep_errquit Cannot lock $destfs. Cannot continue
	fi

	_debugprint refresh step 1: Going to $srchost to snapshot $destfs
	newsnap=`zrep_ssh $srchost $ZREP_PATH snaponly $srcfs`
	if [[ $? -ne 0 ]] ; then
		zrep_errquit snap of src $srcfs on $srchost failed
	fi
	# yes, MORE paranoia..
	case $newsnap in
		*@${ZREPTAG}_*)
			newseq=${newsnap#*@}
			;;
		*)
			zrep_errquit Unrecognized output from src snap. Cannot continue
			;;					
	esac
	
	typeset	senttimeprop="`_gensentprop`"

	_debugprint refresh step 2: Pulling $newsnap

	if [[ "$BBCP" != "" ]] ; then
		$BBCP "$srchost:$ZREP_PATH _refreshpull $newsnap" \
		  "zfs recv $destfs"
	else
		zrep_ssh $srchost "$ZREP_PATH _refreshpull $newsnap ${Z_F_OUT}" |
		  eval ${Z_F_IN} zfs recv $destfs
	fi
	if [[ $? -ne 0 ]] ; then
		zrep_errquit Unforseen error pulling snapshot $newsnap from $srchost
	fi

	zfs set $senttimeprop $destfs@$newseq
	if [[ $? -ne 0 ]] ; then
		_errprint WARNING: expected local copy $destfs@newseq does not exist
	fi

	_debugprint Running local expires on $destfs
	_expire $destfs
	_debugprint Running remote expires on $srcfs
	zrep_ssh $srchost "$ZREP_PATH expire -L $srcfs"

	zrep_unlock_fs $destfs

}

# Hidden command-line option for "zrep refresh"
# This is the "remote call" to support zrep refresh
#    ( aka  zrep_refresh  )
# In principle, its kinda like "zrep expire" being callable by
# both the user, and the program itself. 
# However, this routine is definitely not supposed to be user visible
#   .. eh... maybe someday. but initial design is "private"
_refreshpull(){
	typeset fs snapname lastsent latest

	snapname="$1"
	fs=${snapname%@*}

	# Keep in mind that stdin/out is busy so have to use stderr.
	# Cant use regular debugprint
	if [[ "$DEBUG" != "" ]] ; then
	     _errprint _refreshpull: snapname=$snapname, fs=$fs
	fi

	zrep_lock_fs $fs
	if [[ $? -ne 0  ]] ; then
		zrep_errquit Could not lock $fs
	fi

	#We should now;
	# 1. compare to latest snap. quit if not latest
	# 2. get timestamp
	# 3. trigger a zfs send
	# 4.  set timestamp if no errors.
	#    I think it is reasonable to presume that if the receive failed,
	#    we will see an error by the pipe blowing up.
	#

	lastsent=`getlastsnapsent $fs`
	if [[ "$lastsent" == "" ]] ; then
		zrep_errquit Canthappen: _refreshpull cant findlastsent snap
	fi
	latest=`getlastsnap $fs`

	if [[ "$latest" != "$snapname" ]] ; then
		zrep_errquit Sync error: $snapname is not latest snap for $fs
	fi

	typeset senttimeprop="`_gensentprop`"

	if (( Z_HAS_SNAPPROPS ==0)) ; then
		zrep_errquit Error: we currently only support modern ZFS that allows setting props on snaps
	fi

	zfs send ${ZREP_R} ${ZREP_INC_FLAG} $lastsent $latest

	if [[ $? -ne 0 ]] ; then
		zrep_errquit Some kind of error during sending. Bailing out of _refreshpull
	fi


	zfs set $senttimeprop $latest
	zrep_unlock_fs $fs
}

# _expire: 
#   get rid of "old" snapshots for a specifically named filesystem
#
# Note0: you must hold local(master) fs lock first
#
# Note1: expire BOTH SIDES, if we are master
# Keep in mind that sometimes master and dest are on same system
# 
# Note2: Be sure to NEVER delete most recent sent snapshot!!

# INTERNAL routine. For external-facing routine, see zrep_expire
_expire(){
	typeset savecount currcount lastsent remotehost remotefs sanity
	typeset tmpfile=$ZREP_RUNDIR/zrep_expire.$$
	typeset local=0 master

	if [[ "$1" == "-L" ]] ; then
		local=1;
		shift
	fi

	master=`$ZFSGETLVAL ${ZREPTAG}:master $1`

	zrep_has_fs_lock $1 || zrep_errquit zrep_expire Internal Err caller did not hold fs lock on $1

	# Allow propagated values as well as local, for savecount
	savecount=`$ZFSGETVAL ${ZREPTAG}:savecount $1`
	# do not use (()) in case value unset
	if [[ $savecount < 1 ]] ; then
		zrep_errquit ${ZREPTAG}:savecount on $1 set to improper value $savecount
	fi

	if [[ "$master" == "yes" ]] ; then
		lastsent=`getlastsnapsent $1`
		if [[ "$lastsent" == "" ]] ; then
			zrep_errquit corrupted zrep data: no last sent detected. Stopping expire
		fi

		getallsnaps $1 |egrep -v $lastsent >$tmpfile
		savecount=$((savecount-1))
	else
		getallsnaps $1 >$tmpfile
	fi
	currcount=`wc -l < $tmpfile`

	if ((currcount > savecount )) ; then
		currcount=$((currcount - savecount))

		head -$currcount $tmpfile >$tmpfile.2
		mv $tmpfile.2 $tmpfile
		for snap in `cat $tmpfile` ; do
			_debugprint expiring $snap
			# Paranoia is good.
			case $snap in
			     *@*)
			    zfs destroy -r $snap
			    ;;
			    *)
			    zrep_errquit "Expire was about to destroy NON-snapshot $snap"
			    ;;
			esac
		done
	fi
	rm $tmpfile
	

	if [[ "$master" != "yes" ]] || ((local ==1)) ; then
		#This fs is dest fs. We are done.
		return
		#otherwise, go expire on remote side as well
	fi

	remotehost=`$ZFSGETVAL ${ZREPTAG}:dest-host $1`
	remotefs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $1`
	print Also running expire on $remotehost:$remotefs now...
	sanity=`zrep_ssh $remotehost $ZFSGETLVAL ${ZREPTAG}:master $remotefs`

	# Normally, dont quit on error. But this is super-bad.
	if [[ "$sanity" == "yes" ]] ; then
		zrep_errquit "Remote side also marked as master ** $remotehost:$remotefs"
	fi

	zrep_ssh $remotehost "$ZREP_PATH expire $remotefs" ||print REMOTE expire failed
}


# top-level user-facing routine.
# expire old snaps for some or all zrep filesystems.
# Different ways of calling:
#   zrep expire all	Run expire on all zrep fs
#   zrep expire		Run expire on zrep fs we are master for, plus remote
#   zrep expire	-L	Run expire on zrep fs we are master for. SKIP remote
#   zrep expire	 fs ..	Run expire only on fs, plus remote if it is a master
#   zrep expire	-L fs 	Run expire only on fs. Skip remote
#
# If no arg given, expire only filesystems we are master for
# If "all" given, expire literally all.
#
zrep_expire()
{
	typeset local
	if [[ "$1" == "-L" ]] ; then
		local="-L"
		shift
	fi

	if [[ "$1" == "all" ]] ; then
		set -- `zrep_list`
	elif [[ "$1" == "" ]] ; then
		set -- `zrep_list_master`
	fi

	# Note: we should continue if we hit problems with an individual
	# filesystem. Otherwise we risk letting server selfdestruct fill
	# over one troublesome filesystem
	#
	while [[ "$1" != "" ]] ; do
		zrep_lock_fs $1
		print Expiring zrep snaps on $1
		 _expire $local $1 || print WARNING: expire failed for $1
		zrep_unlock_fs $1
		shift
	done
	
}
#### zrep_failover



# run this on 'master' side, to make other side master
zrep_failover(){
	typeset local=0 fs snap="" remotehost remotefs check

	if [[ "$1" == "-L" ]] ; then
		local=1
		shift
	fi

	if [[ "$1" == "" ]] ; then
		usage
		exit 1
	fi

	zfs list $1 >/dev/null || zrep_errquit invalid filesystem $1
	check=`$ZFSGETLVAL ${ZREPTAG}:master $1`
	if [[ "$check" != "yes" ]] ; then
		zrep_errquit $1 not master. Cannot fail over
	fi

	fs="$1"
	
	case $fs in
		*@*)
			snap=$fs
			fs=${srcsnap%@*}
		;;
	esac

	zrep_lock_fs $fs ||zrep_errquit could not lock $fs

	remotehost=`$ZFSGETVAL ${ZREPTAG}:dest-host $fs`
	remotefs=`$ZFSGETVAL ${ZREPTAG}:dest-fs $fs`

	print Setting readonly on local $fs, then syncing
	zfs set readonly=on $fs

	if ((local ==1)) ; then
		print Failover for $1 in LOCAL mode
		if [[ "$snap" == "" ]] ; then
			snap=`getlastsnapsent $1`
			zfs list $1 >/dev/null ||
				zrep_errquit No last synced snap found for $1. Cannot fail over
			print Rolling back to last sync $snap
		else
			print Rolling back to specified snap $snap
		fi
		zfs rollback -Rr $snap ||zrep_errquit Rollback to $snap failed

	else

		## Need to sync both sides before mode switch!
		## If named snap, roll back.
		## otherwise, "roll forward" by doing one last sync

		if [[ "$snap" != "" ]] ; then
			typeset snapname
			snapname=${snap#*@}

			print Rolling back to local $snap
			zfs rollback -Rr $snap || zrep_errquit Rollback to $snap failed
			print Rolling back $remotehost to $remotefs@$snapname
			zrep_ssh $remotehost zfs rollback $remotefs@$snapname ||
				zrep_errquit remote rollback failed

		else
			# makes new snapshot, and syncs 
			_snapandsync $fs $remotehost $remotefs || zrep_errquit final sync failed. failover failed.
		fi


	fi

	print Reversing master properties for $Z_LOCAL_HOST:$fs

	zfs set ${ZREPTAG}:dest-fs=$fs $fs	
	zfs set ${ZREPTAG}:dest-host=$Z_LOCAL_HOST $fs
	zfs set ${ZREPTAG}:src-fs=$remotefs $fs	
	zfs set ${ZREPTAG}:src-host=$remotehost $fs

	zfs inherit ${ZREPTAG}:master $fs
	
	zrep_unlock_fs $fs

	if (( local ==0)) ;then
		print Setting master on $remotehost:$remotefs
		zrep_ssh $remotehost $ZREP_PATH takeover -L $remotefs
	fi
	
}

# run this on 'dest' side, to promote it to master
zrep_takeover(){
	typeset fs snap remotehost remotefs check local=0

	if [[ "$1" == "-L" ]] ; then
		local=1
		shift
	fi
	
	if [[ "$1" == "" ]] ; then
		usage
		exit 1
	fi

	fs="$1"

	zfs list $fs >/dev/null || zrep_errquit invalid filesystem $fs

	check=`$ZFSGETLVAL ${ZREPTAG}:master $fs`
	if [[ "$check" = "yes" ]] ; then
		zrep_errquit $fs is already master. Cannot takeover
	fi


	remotehost=`$ZFSGETVAL ${ZREPTAG}:src-host $fs`
	remotefs=`$ZFSGETVAL ${ZREPTAG}:src-fs $fs`


	if (( local == 0 )) ; then

		print Starting failover from remote side $remotehost
		zrep_ssh $remotehost $ZREP_PATH failover $remotefs
		exit $?
	fi

	# If here, we must be in local mode.
	# So... just set properties!
	# (and roll back, if desired)

	case $fs in
		*@*)
			snap=$fs
			fs=${srcsnap%@*}
		;;
	esac



	zrep_lock_fs $fs
	zfs inherit readonly $fs

	if [[ "$snap" != "" ]] ; then
		print "WARNING: Before takeover, we will be rolling $fs"
		print -n "   to  $snapname, made at: "
		zfs get -H -o value creation $snap
		print ""
		print "All newer snapshots will be destroyed"
		print Continuing in 10 seconds...
		sleep 10

		zfs rollback -Rr $snap || zrep_errquit Rollback to $snap failed
	fi

	print Setting master properties for $Z_LOCAL_HOST:$fs

	zfs set ${ZREPTAG}:src-fs=$fs $fs	
	zfs set ${ZREPTAG}:src-host=$Z_LOCAL_HOST $fs
	zfs set ${ZREPTAG}:dest-fs=$remotefs $fs	
	zfs set ${ZREPTAG}:dest-host=$remotehost $fs

	zfs set ${ZREPTAG}:master=yes $fs

	# Since we default to creating replicas unmounted... mount it now
	if [[ "`zfs get -H -o value type $fs`" == "filesystem" ]] ; then
		if [[ "`zfs get -H -o value mounted $fs`" == "no" ]] ; then
				print Mounting $Z_LOCAL_HOST:$fs
				zfs mount $fs
		fi
	fi
	
	zrep_unlock_fs $fs
	

}

######## zrep_top continues here

usage(){
	print zrep v${ZREP_VERSION}: a program to replicate a zfs filesystem to another
	print in an ongoing basis.
	print More documentation at a later date.
	print "  Philip Brown, 2012"
	print ""
	print Simple usage summary:
	print 'zrep (init|-i) ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (sync|-S) [-q seconds] ZFS/fs'
	print 'zrep (sync|-S) [-q seconds] all'
	print 'zrep (sync|-S) ZFS/fs@snapshot    -- temporary retroactive sync'
	print 'zrep (status|-s) [-v] [(-a|ZFS/fs)]'
	print 'zrep refresh ZFS/fs               -- pull version of sync'
	print 'zrep (list|-l) [-Lv]  [fs/names]'
	print 'zrep (list|-l) -s     [fs/names]  -- list snapshots' 
	print 'zrep (expire|-e) [-L] (ZFS/fs ...)|(all)|()'
	print 'zrep (changeconfig|-C) [-f] ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (changeconfig|-C) [-f] [-d] ZFS/fs srchost srcZFSpool/fs'
	print 'zrep failover [-L] ZFS/fs'
	print 'zrep takeover [-L] ZFS/fs'
	print 'zrep version'
	print 'zrep clear [-f] ZFS/fs  -- REMOVE ZREP CONFIG AND SNAPS FROM FILESYSTEM'
	print
	print '   -q option says to Quietly ignore locked filesystems that have synced'
	print '      more recently than the given amount of seconds'
	print
	print 'Paired commands for high-transaction systems:'
	print '   zrep snaponly ZFS/fs'
	print '   zrep synconly ZFS/fs'
	print 'The above two commands split the simple sync subcommand, into two'
	print 'separate steps, so that a database, etc. may resume while the sync'
	print 'completes in the background'
	print ''
	print 'zrep defaults to using ssh. However, if remotehost is set to localhost,'
	print 'zrep will use a simple pipe instead.'
	print ''
	print ' More detailed examples can be found at:'
	print http://www.bolthole.com/solaris/zrep/zrep.documentation.html
	print ''
	print 'See the above documentation for details on using the -t flag'
}

#special case this. sigh...
if [ "$1" == "-t" ] ; then
	if [ "$2" == "" ] ; then
		usage
	fi
	#deliberately dont quote this to avoid stupidity or malice by user
	ZREPTAG=$2
	
	shift
	shift
fi

if [[ "$ZREPTAG" != "zrep" ]] ; then
	# If custom zrep tag, then probably multiple layers of snapshots.
	# In this case, DO NOT send all intermediate snapshots for replication
	ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-i"}

	if [ "$ZREPTAG" != "" ] ; then
	    ZREP_PATH="$ZREP_PATH -t $ZREPTAG"
	fi
fi
# ensure it is set to SOMETHING by default. Default is to send all
ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-I"}




case "$1" in
	"")
		usage
		;;
	changeconfig|-C)
		shift
		zrep_changeconfig "$@"
		;;
	clear)
		shift
		# only actually allows ONE  fs, but with optional -f
		zrep_clear "$@"
		;;
	expire|-e)
		shift
		zrep_expire "$@"
		;;
	init|-i)
		shift
		zrep_init "$@"
		;;
	sentsync)
		shift
		zrep_sentsync "$1" #this is a 'something is broken" operation, so make it limited
		;;
	snaponly)
		shift
		zrep_snaponly "$@"
		;;
	sync|-S)
		shift
		zrep_sync "$@"
		;;
	synconly)
		shift
		zrep_synconly "$@"
		;;
	refresh)	# yes keep this in this order
		shift
		zrep_refresh "$@"
		;;
	status|-s)
		shift
		zrep_status "$@"
		;;
	list|-l)
		shift
		zrep_list "$@"
		;;
	failover)
		shift
		zrep_failover "$@"
		;;
	takeover)
		shift
		zrep_takeover "$@"
		;;
	version)
		print "zrep $ZREP_VERSION"
		print "http://www.bolthole.com/solaris/zrep"
		print "http://www.github.com/bolthole/zrep"
		exit
		;;
		
	_refreshpull)  # Secret option DO NOT PUT IN USAGE!!
		shift
		_refreshpull $1
		;;
	*)
		print "ERROR: Dont know what to do with: $@"
		print ""
		usage
		;;
esac


