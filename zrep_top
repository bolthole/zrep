#!/bin/ksh -p

# For more detailed documentation, see zrep.txt or zrep.overview.txt

# note to self: always make this 3 fields
ZREP_VERSION=1.8.0

######## start of included files from zrep_top here
AWKinclude zrep_vars
AWKinclude zrep_status
AWKinclude zrep_snap
AWKinclude zrep_sync
AWKinclude zrep_failover

######## zrep_top continues here

usage(){
	print zrep v${ZREP_VERSION}: a program to replicate a zfs filesystem to another
	print in an ongoing basis.
	print 
	print "  (c) Philip Brown, 2012-2020"
	print 
	print Simple usage summary:
	print 'zrep (init|-i) [-v] ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (sync|-S) [-f] [-v] [-q seconds] ZFS/fs'
	print 'zrep (sync|-S) [-f] [-v] [-q seconds] all'
	print 'zrep (sync|-S) [-f] [-v] ZFS/fs snapshot  -- temporary retroactive sync'
	print 'zrep refresh [-f] [-v] ZFS/fs             -- pull partner of sync'
	print 'zrep failover [-L] ZFS/fs'
	print 'zrep takeover [-L] ZFS/fs'
	print 
	print "Status and side operations"
	print 'zrep (status|-s) [-v] [(-a|ZFS/fs)]'
	print 'zrep (status|-s) -m [ZFS/fs]'
	print 'zrep (list|-l) [-Lv]  [fs/names]'
	print 'zrep (list|-l) -s     [fs/names]  -- list all relevant zrep snapshots'
	print 'zrep getlastsent ZFS/fs           -- prints out snapshot of last successful sync sent'
#	print 'zrep setlastsent ZFS/fs snapname  -- overrides value of last known snapshot synced'
	print 'zrep (expire|-e) [-L] (ZFS/fs ...)|(all)|()'
	print 'zrep uptodate ZFS/fs    -- returns 0 if no writes since last sync.'
	print 'zrep version'
	print 'zrep clear [-f] ZFS/fs  -- REMOVE ZREP CONFIG AND SNAPS FROM FILESYSTEM'
	print 'zrep (changeconfig|-C) [-f] ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (changeconfig|-C) [-f] [-d] ZFS/fs srchost srcZFSpool/fs'
	print
	print '   -q option to sync says to Quietly ignore locked filesystems'
	print '    that have synced more recently than the given amount of seconds'
	print
	print 'Paired commands for high-transaction systems:'
	print '   zrep snaponly (ZFS/fs ... |all)'
	print '   zrep synconly (ZFS/fs ...|all)'
	print 'The above two commands split the simple sync subcommand, into two'
	print 'separate steps, so that a database, etc. may resume while the sync'
	print 'completes in the background'
	print ''
	print 'zrep defaults to using ssh. However, if remotehost is set to localhost,'
	print 'zrep will use a simple pipe instead.'
	print ''
	print ' More detailed examples can be found at:'
	print http://www.bolthole.com/solaris/zrep/zrep.documentation.html
	print ''
	print 'See the above documentation for details on using the -t flag to use zrep tags'
}

#
# Special global flags that must always be processed FIRST, before normal command args.
#
while [[ "$1" == -[tD] ]] ; do
	case "$1" in
	    -D)
		DEBUG=1
		shift
		;;
	    -t)
		if [ "$2" == "" ] ; then
		usage
		fi
		#deliberately dont quote this to avoid stupidity or malice by user
		ZREPTAG=$2
		shift
		shift
		;;
	esac
done	


if [[ "$ZREPTAG" != "zrep" ]] ; then
	# If custom zrep tag, then probably multiple layers of snapshots.
	# In this case, DO NOT send all intermediate snapshots for replication
	ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-i"}

	if [ "$ZREPTAG" != "" ] ; then
	    ZREP_PATH="$ZREP_PATH -t $ZREPTAG"
	fi
fi
# ensure it is set to SOMETHING by default. Default is to send all
ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-I"}




case "$1" in
	"")
		usage
		;;
	changeconfig|-C)
		shift
		zrep_changeconfig "$@"
		;;
	clear)
		shift
		# only actually allows ONE fs
		if [[ "$1" == "-f" ]] ; then
			shift
			ZREP_FORCE=-f
		fi
		zrep_clear "$@"
		;;
	expire|-e)
		shift
		zrep_expire "$@"
		;;
	init|-i)
		shift
		if [[ "$1" == "-v" ]] ; then
			shift
			ZREP_VERBOSE=yes
		fi
		zrep_init "$@"
		;;
	sentsync)
		shift
		# Note that this will NOT accept multiple snaps, for safety
		zrep_sentsync "$@" 
		;;
	snaponly)
		shift
		zrep_snaponly "$@"
		;;
	sync|-S)  #remember, this is inverse of refresh
		shift
		while  [ "$1" != "" ] ; do
			case $1 in
				"-f")
				shift
				ZREP_FORCE=-f
				;;
				"-v")
				shift
				ZREP_VERBOSE=yes
				;;
				"-r")
				shift
				ZREP_RESUME=yes
				;;
				*)
				break
				;;
			esac
		done
		zrep_sync "$@"
		;;
	synconly)
		shift
		zrep_synconly "$@"
		;;
	refresh)	# yes keep this in this order
		shift
		while  [ "$1" != "" ] ; do
			case $1 in
				"-f")
				shift
				ZREP_FORCE=-f
				;;
				"-v")
				shift
				ZREP_VERBOSE=yes
				;;
				"-r")
				shift
				ZREP_RESUME=yes
				;;
				*)
				break
				;;
			esac
		done
		zrep_refresh "$@"
		;;
	status|-s)
		shift
		zrep_status "$@"
		;;
	list|-l)
		shift
		zrep_list "$@"
		;;
	lastsent|getlastsent)
		# lastsent is a backward compability hook.
		shift
		zrep_getlastsent "$@"
		;;
	failover)
		shift
		if [[ "$1" == "-f" ]] ; then
			shift
			ZREP_FORCE=-f
		fi
		zrep_failover "$@"
		;;
	setlastsent)
		shift
		#zrep_setlastsent "$@"
		echo Nothing to see here. You might want sentsync. You might not.
		#  This kind of overlaps with "sentsync". Which may be poorly named
		#
		exit 1
		;;
	takeover)
		shift
		zrep_takeover "$@"
		;;
	uptodate)
		shift
		zrep_uptodate "$@"
		exit $?
		;;
	version)
		print "zrep $ZREP_VERSION"
		print "http://www.bolthole.com/solaris/zrep"
		print "http://www.github.com/bolthole/zrep"
		exit
		;;
	_refreshsnap)  # Secret option DO NOT PUT IN USAGE!!
		shift
		_refreshsnap $@
		;;
	_refreshpull)  # Secret option DO NOT PUT IN USAGE!!
		shift
		_refreshpull $@
		;;
	_refreshcomplete)  # Secret option DO NOT PUT IN USAGE!!
		shift
		_refreshcomplete $@
		;;
	*)
		print "ERROR: unrecognized zrep subcommand $1"
		echo  "       Dont know what to do with: $0 $@"
		print ""
		usage
		;;
esac


