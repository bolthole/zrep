#!/bin/ksh -p

# For more detailed documentation, see zrep.txt or zrep.overview.txt
ZREP_VERSION=1.7.1

######## start of included files from zrep_top here
AWKinclude zrep_vars
AWKinclude zrep_status
AWKinclude zrep_snap
AWKinclude zrep_sync
AWKinclude zrep_failover

######## zrep_top continues here

usage(){
	print zrep v${ZREP_VERSION}: a program to replicate a zfs filesystem to another
	print in an ongoing basis.
	print More documentation at a later date.
	print "  Philip Brown, 2012"
	print ""
	print Simple usage summary:
	print 'zrep (init|-i) ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (sync|-S) [-q seconds] ZFS/fs'
	print 'zrep (sync|-S) [-q seconds] all'
	print 'zrep (sync|-S) ZFS/fs@snapshot    -- temporary retroactive sync'
	print 'zrep (status|-s) [-v] [(-a|ZFS/fs)]'
	print 'zrep refresh ZFS/fs               -- pull version of sync'
	print 'zrep (list|-l) [-Lv]  [fs/names]'
	print 'zrep (list|-l) -s     [fs/names]  -- list snapshots' 
	print 'zrep (expire|-e) [-L] (ZFS/fs ...)|(all)|()'
	print 'zrep (changeconfig|-C) [-f] ZFS/fs remotehost remoteZFSpool/fs'
	print 'zrep (changeconfig|-C) [-f] [-d] ZFS/fs srchost srcZFSpool/fs'
	print 'zrep failover [-L] ZFS/fs'
	print 'zrep takeover [-L] ZFS/fs'
	print 'zrep version'
	print 'zrep clear [-f] ZFS/fs  -- REMOVE ZREP CONFIG AND SNAPS FROM FILESYSTEM'
	print
	print '   -q option says to Quietly ignore locked filesystems that have synced'
	print '      more recently than the given amount of seconds'
	print
	print 'Paired commands for high-transaction systems:'
	print '   zrep snaponly ZFS/fs'
	print '   zrep synconly ZFS/fs'
	print 'The above two commands split the simple sync subcommand, into two'
	print 'separate steps, so that a database, etc. may resume while the sync'
	print 'completes in the background'
	print ''
	print 'zrep defaults to using ssh. However, if remotehost is set to localhost,'
	print 'zrep will use a simple pipe instead.'
	print ''
	print ' More detailed examples can be found at:'
	print http://www.bolthole.com/solaris/zrep/zrep.documentation.html
	print ''
	print 'See the above documentation for details on using the -t flag'
}

#special case this. sigh...
if [ "$1" == "-t" ] ; then
	if [ "$2" == "" ] ; then
		usage
	fi
	#deliberately dont quote this to avoid stupidity or malice by user
	ZREPTAG=$2
	
	shift
	shift
fi

if [[ "$ZREPTAG" != "zrep" ]] ; then
	# If custom zrep tag, then probably multiple layers of snapshots.
	# In this case, DO NOT send all intermediate snapshots for replication
	ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-i"}

	if [ "$ZREPTAG" != "" ] ; then
	    ZREP_PATH="$ZREP_PATH -t $ZREPTAG"
	fi
fi
# ensure it is set to SOMETHING by default. Default is to send all
ZREP_INC_FLAG=${ZREP_INC_FLAG:-"-I"}




case "$1" in
	"")
		usage
		;;
	changeconfig|-C)
		shift
		zrep_changeconfig "$@"
		;;
	clear)
		shift
		# only actually allows ONE  fs, but with optional -f
		zrep_clear "$@"
		;;
	expire|-e)
		shift
		zrep_expire "$@"
		;;
	init|-i)
		shift
		zrep_init "$@"
		;;
	sentsync)
		shift
		zrep_sentsync "$1" #this is a 'something is broken" operation, so make it limited
		;;
	snaponly)
		shift
		zrep_snaponly "$@"
		;;
	sync|-S)  #remember, this is inverse of refresh
		shift
		zrep_sync "$@"
		;;
	synconly)
		shift
		zrep_synconly "$@"
		;;
	refresh)	# yes keep this in this order
		shift
		zrep_refresh "$@"
		;;
	status|-s)
		shift
		zrep_status "$@"
		;;
	list|-l)
		shift
		zrep_list "$@"
		;;
	failover)
		shift
		zrep_failover "$@"
		;;
	takeover)
		shift
		zrep_takeover "$@"
		;;
	version)
		print "zrep $ZREP_VERSION"
		print "http://www.bolthole.com/solaris/zrep"
		print "http://www.github.com/bolthole/zrep"
		exit
		;;
		
	_refreshpull)  # Secret option DO NOT PUT IN USAGE!!
		shift
		_refreshpull $1
		;;
	*)
		print "ERROR: Dont know what to do with: $@"
		print ""
		usage
		;;
esac


